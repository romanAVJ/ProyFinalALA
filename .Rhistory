# read data
df_r <- read.csv(file = '/Data/trans_data.csv', header = TRUE)
# read data
df_r <- read.csv(file = '/Data/trans_data.csv', header = TRUE)
getwd()
# read data
df_r <- read.csv(file = 'Data/trans_data.csv', header = TRUE)
library(ggplot2)
library(forcast)
library(dplyr)
df_r %>% head()
sapply(df_r, class)
# read data
df_r <- read.csv(file = 'Data/trans_data.csv', header = TRUE, stringsAsFactors = FALSE)
sapply(df_r, class)
library(lubridate)
View(df_r)
x <- df_r[1,1]
x
as.Date(x)
# read data
df_r <- read.csv(file = 'Data/trans_data.csv', header = TRUE, stringsAsFactors = FALSE) %>%
mutate( date = as.Date(date))
df_r %>% select(data) %>% table()
names(df_r)
# number of transactions
df_tr <- df_r %>%
select( date) %>%
group_by( date) %>%
summarise( freq = count())
# number of transactions
df_tr <- df_r %>%
select(date) %>%
group_by(date) %>%
summarise(freq = count(date))
# number of transactions
df_tr <- df_r %>%
select(date) %>%
group_by(date) %>%
summarise(freq = n())
View(df_tr)
plot.ts(df_tr)
View(df_tr)
plot-ts(df_r)
plot-ts(df_r[,2])
# number of transactions and amount of transactions
df_tr <- df_r %>%
group_by(date) %>%
summarise(freq = n(),
amount = sum(amount))
View(df_tr)
plot.ts(df_tr)
# read data
df_r <- read.csv(file = 'Data/trans_data.csv', header = TRUE, stringsAsFactors = FALSE) %>% #read data
mutate(date = as.Date(date)) %>%  #tranform to yyyy-mm-dd
group_by(date) %>% # aggregates
summarise(freq = n(),
amount = sum(amount))
View(df_r)
# plot time series
autoplot(df_r[, 'date'], df_r[, 'freq'])
df_r[, 'date']
df_r[, 'freq']
# plot time series
autoplot(df_r[, 'date'], df_r[, 'freq'])
# plot time series
df_r %>%
select(freq, amount) %>%
plot.ts()
# read data
df_card <- read.csv(file = 'Data/trans_card.csv', header = TRUE, stringsAsFactors = FALSE) %>% #read data
mutate(date = as.Date(date)) %>%  #tranform to yyyy-mm-dd
group_by(date) %>% # aggregates
summarise(freq = n(),
amount = sum(amount))
df_trans <- read.csv(file = 'Data/trans_all.csv', header = TRUE, stringsAsFactors = FALSE)
library(ggplot2)
library(forcast)
library(dplyr)
library(lubridate)
# read data
df_card <- read.csv(file = 'Data/trans_card.csv', header = TRUE, stringsAsFactors = FALSE) %>% #read data
mutate(date = as.Date(date)) %>%  #tranform to yyyy-mm-dd
group_by(date) %>% # aggregates
summarise(freq = n(),
amount = sum(amount))
df_trans <- read.csv(file = 'Data/trans_all.csv', header = TRUE, stringsAsFactors = FALSE)
# plot time series
df_card %>%
select(freq, amount) %>%
plot.ts()
View(df_trans)
df_trans %>%
select(num_trans) %>%
plot.ts()
df_trans <- read.csv(file = 'Data/trans_all.csv', header = TRUE, stringsAsFactors = FALSE) %>% rev()
library(purrr)
df_trans <- read.csv(file = 'Data/trans_all.csv', header = TRUE, stringsAsFactors = FALSE) %>%
map_df(rev)
df_trans %>%
select(num_trans) %>%
plot.ts()
df_trans %>%
select(num_trans) %>%
tail(n = 60) %>%
plot.ts()
df_trans %>%
select(num_trans) %>%
tail(n = 120) %>%
plot.ts()
df_trans %>%
select(num_trans) %>%
tail(n = 60) %>%
plot.ts()
df_trans %>%
select(num_trans) %>%
tail(n = 90) %>%
plot.ts()
df_trans %>%
select(num_trans) %>%
tail(n = 60) %>%
plot.ts()
library(ggplot2)
library(forcast)
library(dplyr)
library(lubridate)
library(purrr)
# read data
df_card <- read.csv(file = 'Data/trans_card.csv', header = TRUE, stringsAsFactors = FALSE) %>% #read data
mutate(date = as.Date(date)) %>%  #tranform to yyyy-mm-dd
group_by(date) %>% # aggregates
summarise(freq = n(),
amount = sum(amount))
df_trans <- read.csv(file = 'Data/trans_all.csv', header = TRUE, stringsAsFactors = FALSE) %>%
map_df(rev) #order asc
# plot time series
df_card %>%
select(freq, amount) %>%
plot.ts()
View(df_card)
View(df_trans)
# plot time series
df_card %>%
select(freq, amount) %>%
plot.ts()
df_trans %>%
select(num_trans) %>%
tail(n = 60) %>%
plot.ts()
df_trans %>%
select(num_trans) %>%
tail(n = 120) %>%
plot.ts()
df_trans %>%
select(num_trans) %>%
tail(n = 60) %>%
plot.ts()
df_trans %>%
select(num_trans) %>%
tail(n = 200) %>%
plot.ts()
df_trans %>%
select(num_trans) %>%
tail(n = 100) %>%
plot.ts()
df_trans %>%
select(num_trans) %>%
tail(n = 60) %>%
plot.ts()
df_trans %>%
select(num_trans) %>%
tail(n = 120) %>%
plot.ts()
df_trans %>%
select(num_trans) %>%
tail(n = 90) %>%
plot.ts()
df_trans %>%
select(num_trans) %>%
tail(n = 70) %>%
plot.ts()
df_trans %>%
select(num_trans) %>%
tail(n = 80) %>%
plot.ts()
df_trans %>%
select(num_trans) %>%
tail(n = 70) %>%
plot.ts()
# plot time series
df_card %>%
select(freq, amount) %>%
plot.ts()
df_trans %>%
select(num_trans) %>%
tail(n = 70) %>%
plot.ts()
# read data
df_trans <- read.csv(file = 'Data/trans_all.csv', header = TRUE, stringsAsFactors = FALSE) %>%
map_df(rev) #order asc
# plot time series
df_trans %>%
select(num_trans) %>%
tail(n = 200) %>%
plot.ts()
# plot time series
df_trans %>%
select(num_trans) %>%
tail(n = 70) %>%
plot.ts()
View(df_trans)
# read data
df_trans <- read.csv(file = 'Data/trans_all.csv', header = TRUE, stringsAsFactors = FALSE)
View(df_trans)
# parse data to ts object (forecast)
# create daily times from
inds <- seq(as.Date('2020-03-01'), as.Date('2020-05-25'), by = 'day')
# parse data to ts object (forecast)
# create daily times from
inds <- seq(as.Date('2020-03-17'), as.Date('2020-05-25'), by = 'day')
names(df_trans)
# parse data to ts object (forecast)
# create daily times from
inds <- seq(as.Date('2020-03-17'), as.Date('2020-05-25'), by = 'day')
ts_trans <- ts(df_trans[, 'num_trans'], start = c(2020, as.numeric(format(inds[1], '%j'))), frequency = 7)
View(df_trans)
ts_trans <- ts(df_trans[1:70, 'num_trans'], start = c(2020, as.numeric(format(inds[1], '%j'))), frequency = 7)
View(ts_trans)
# plot time series
autoplot( ts_trans)
# plot time series
plot(ts_trans)
inds
ts_trans <- ts(df_trans[1:70, 'num_trans'], start = c(2020, as.numeric(format(inds[1], '%j'))), frequency = 365)
# plot time series
plot(ts_trans)
ts_trans <- ts(df_trans[1:120, 'num_trans'], start = c(2020, as.numeric(format(inds[1], '%j'))), frequency = 365)
# plot time series
plot(ts_trans)
# read data
df_trans <- read.csv(file = 'Data/trans_all.csv', header = TRUE, stringsAsFactors = FALSE)
# parse data to ts object (forecast)
# create daily times from
inds <- seq(as.Date('2020-03-17'), as.Date('2020-05-25'), by = 'day')
ts_trans <- ts(df_trans[1:120, 'num_trans'], start = c(2020, as.numeric(format(inds[1], '%j'))), frequency = 365)
# plot time series
plot(ts_trans)
ts_trans <- ts(df_trans[1:200, 'num_trans'], start = c(2020, as.numeric(format(inds[1], '%j'))), frequency = 365)
# plot time series
plot(ts_trans)
# read data
df_trans <- read.csv(file = 'Data/trans_all.csv', header = TRUE, stringsAsFactors = FALSE)
# parse data to ts object (forecast)
# create daily times from
inds <- seq(as.Date('2020-03-17'), as.Date('2020-05-25'), by = 'day')
# read data
df_trans <- read.csv(file = 'Data/trans_all.csv', header = TRUE, stringsAsFactors = FALSE)
# parse data to ts object (forecast)
# create daily times from
inds <- seq(as.Date('2020-03-17'), as.Date('2020-05-25'), by = 'day')
ts_trans <- ts(df_trans[1:70, 'num_trans'], start = c(2020, as.numeric(format(inds[1], '%j'))), frequency = 365)
# plot time series
plot(ts_trans)
# read data
df_trans <- read.csv(file = 'Data/trans_all.csv', header = TRUE, stringsAsFactors = FALSE) %>% map_df(rev)
# read data
df_trans <- read.csv(file = 'Data/trans_all.csv', header = TRUE, stringsAsFactors = FALSE) %>% map_df(rev)
# parse data to ts object (forecast)
# create daily times from
inds <- seq(as.Date('2020-03-17'), as.Date('2020-05-25'), by = 'day')
ts_trans <- ts(df_trans[1:70, 'num_trans'], start = c(2020, as.numeric(format(inds[1], '%j'))), frequency = 365)
# plot time series
plot(ts_trans)
# read data
df_trans <- read.csv(file = 'Data/trans_all.csv', header = TRUE, stringsAsFactors = FALSE) %>% map_df(rev)
# read data
df_trans <- read.csv(file = 'Data/trans_all.csv', header = TRUE, stringsAsFactors = FALSE) %>% map_df(rev)
# parse data to ts object (forecast)
# create daily times from
n <- nrow(df_trans)
inds <- seq(as.Date('2020-03-17'), as.Date('2020-05-25'), by = 'day')
ts_trans <- ts(df_trans[(n-60):n, 'num_trans'], start = c(2020, as.numeric(format(inds[1], '%j'))), frequency = 365)
ts_trans <- ts(df_trans[(n-61):n, 'num_trans'], start = c(2020, as.numeric(format(inds[1], '%j'))), frequency = 365)
ts_trans <- ts(df_trans[(n-59):n, 'num_trans'], start = c(2020, as.numeric(format(inds[1], '%j'))), frequency = 365)
# plot time series
plot(ts_trans)
ts_trans <- ts(df_trans[(n-59):n, 'num_trans'], start = c(2020, as.numeric(format(inds[1], '%j'))), frequency =7)
# plot time series
plot(ts_trans)
install.packages('forcast')
library(forcast)
library(forcast)
library(forcast)
library(ggplot2)
library(forcast)
install.packages("installr"); library(installr) # install+load installr
updateR() # updating R.
