library(dplyr)
library(lubridate)
library(purrr)
# read data
df_trans <- read.csv(file = 'Data/trans_all.csv', header = TRUE, stringsAsFactors = FALSE) %>% map_df(rev)
n <- nrow(df_trans)
trans60 <- df_trans[(n-69):n, 'num_trans'] %>% as.matrix()
# parse data to ts object (forecast)
# create daily times from
inds <- seq(as.Date('2020-03-06'), as.Date('2020-05-24'), by = 'day')
ts_trans <- ts(trans60, start = c(2020, as.numeric(format(inds[1], '%j'))), frequency = 7)
# plot time series
autoplot(ts_trans, color = 'navy') + theme_minimal()
# plot seasonality
# linear
ggseasonplot(ts_trans, season.labels = TRUE) + theme_minimal()
#polar
ggseasonplot(ts_trans, season.labels = TRUE, polar = TRUE) + theme_minimal()
# mean value by day
ggsubseriesplot(ts_trans)
#lag plots
gglagplot(ts_trans) # look all the noise except for lag 7
# data-seasonal-trend-reminder
descomposedTS <- stl(ts_trans[,'num_trans'], s.window = 'periodic')
descomposedTS %>% autoplot()
# lambda
lambda <- df_trans %>%  BoxCox.lambda(method = 'guerrero') # lambda = 1 ==> no more changes
# look trend
ggtsdisplay(ts_trans)
# differentiate
ts_transD <- diff(ts_trans)
# plot new trend
ggtsdisplay(ts_transD)
# function to determine number of appropiate differences
ndif <- ndiffs(ts_trans) #0
# level
mu <- mean(ts_trans)
# new serie
ts_trans <- ts_trans - mu
# fast fourier transform
n <- 70 # total data
df_fft <- data.frame(coef = fft(trans60) / 70, freqindex = 1:70)
# look to the spectrum
df_fft[2:n,] %>%
ggplot(aes(freqindex, Mod(num_trans))) +
geom_line()
# identify peaks
df_fft[ Mod(df_fft$num_trans) > 7.5 & df_fft$freqindex < n/2, 'freqindex' ] - 1
nff <-  function(x = NULL, n = NULL, up = 10L, plot = TRUE, add = FALSE, main = NULL, ...){
#size of the signal
N <- length(x)
#The direct transformation
#The first frequency is DC, the rest are duplicated
dff <-  fft(x)
#The time
t <-  seq(from = 1, to = N)
#Upsampled time
nt <-  seq(from = 1, to = N+1-1/up, by = 1/up)
#New spectrum
ndff <-  array(data = 0, dim = c(length(nt), 1L))
ndff[1] <-  dff[1] #Always, it's the DC component
if(n != 0){
ndff[2:(n+1)] <-  dff[2:(n+1)] #The positive frequencies always come first
#The negative ones are trickier
ndff[length(ndff):(length(ndff) - n + 1)] <-  dff[N:(N - n + 1)]
}
#The inverses
indff <-  fft(ndff/N, inverse = TRUE) ### !
idff <-  fft(dff/N, inverse = TRUE) ### ! N - 73
if(plot){
if(!add){
plot(x = t, y = x, pch = 16L, xlab = "Time", ylab = "Measurement",
main = ifelse(is.null(main), paste(n, "harmonics"), main))
lines(y = Mod(idff), x = t, col = adjustcolor(1L, alpha = 0.5))
}
lines(y = Mod(indff), x = nt, ...)
}
ret <-  data.frame(time = nt, y = Mod(indff))
return(ret)
}
# look different number of armonics
nff(x = trans60, n = 7L, up = 70L, col = 2L)
nff(x = trans60, n = 14L, up = 200L, col = 'navy')
nff(x = trans60, n = 20L, up = 200L, col = 'green')
colors <- viridis::viridis(15)
for(i in 1:15){
ad = ifelse(i == 1, FALSE, TRUE)
nff(x = trans60, n = i, up = 100L, col = colors[i], add = ad, main = "All waves up to 15th harmonic")
}
# recomended model from forecast package
auto.arima(ts_trans)
# recomended model from forecast package
auto.arima(ts_trans, approximation = FALSE,  stepwise = FALSE) # harder search
auto.arima(ts_trans) # harder search
# recomended model from forecast package
auto.arima(ts_trans, approximation = FALSE,  stepwise = FALSE) # harder search
auto.arima(ts_trans) # harder search
fit2 <- auto.arima(ts_trans) # simpler search
plot(fit2)
# recomended model from forecast package
fit1 <- auto.arima(ts_trans, approximation = FALSE,  stepwise = FALSE) # harder search
autoplot(fit2)
autoplot(fit1)
autoplot(fit2)
# look ACF and PACF
ts_trans %>% diff(lag = 7) %>% ggtsdisplay()
# ACF & PACF
fit2 %>% ggtsdisplay()
# 1. ACF & PACF for residuals
fit2 %>% residuals() %>% ggtsdisplay()
# 2. Check normality
fit2 %>% checkresiduals()
# 3. Look outliers
fit2 %>% residuals() %>% boxplot.stats()
# 3. Look outliers
fit2 %>% residuals() %>% boxplot()
fit2 %>% residuals() %>% qqnorm() # 3 outliers
fit2 %>% residuals() %>% qqline() # 3 outliers
fit2 %>% residuals() %>% qqline() # 3 outliers
fit2 %>% residuals() %>% qqline() # 3 outliers
fit2 %>% residuals() %>% qqline() # 3 outliers
fit2 %>% residuals() %>% qqnorm() # 3 outliers
# 1. ACF & PACF for residuals
fit2 %>% residuals() %>% ggtsdisplay() #looks good
# 2. Check normality
fit2 %>% checkresiduals() #p-value 0.2, ok
# 3. Look outliers
fit2 %>% residuals() %>% boxplot() # 3 outliers
fit2 %>% residuals() %>% qqnorm() # 3 outliers
fit2 %>% residuals() %>% qqline() # 3 outliers
# forecast
fit2 %>% forecast(h = 7) %>% autoplot()
# forecast
fit2 %>% forecast(h = 7, level = c(70,80,95)) %>% autoplot()
# forecast
fit2 %>% forecast(h = 7, level = c(50,95)) %>% autoplot()
# forecast
fit2 %>% forecast(h = 7, level = c(80,95)) %>% autoplot()
View(fit1)
# forecast
fit2 %>% forecast(h = 14, level = c(80,95)) %>% autoplot()
# forecast
fit2 %>% forecast(h = 28, level = c(80,95)) %>% autoplot()
seq(6)
1:6
# forecast
fit2 %>% forecast(h = 14, level = c(80,95)) %>% autoplot()
# forecast
fit2 %>% forecast(h = 28, level = c(80,95)) %>% autoplot()
# intialize
plots <- list()
# take out seasonality
ts_transDS <- ts_trans %>% diff(lag = 7)
# routine to gather the best number of harmonics
for (i in 1:7){
# fit model
fit <- auto.arima(ts_transDS, xreg = fourier(ts_transDS, K = i), # K = i number of harmonics
seasonal = FALSE, lambda = 1)
# save plots
plots[[i]] <- fit %>%
forecast(xreg = fourier(ts_transDS, K = i, h = 28)) %>%
autoplot() +
xlab(paste('K=',i,'  AICc =', round(fit[['aicc']],2))) +
ylab('')
}
# plot
gridExtra::grid.arrange(
plots[[1]],
plots[[2]],
plots[[3]],
plots[[4]],
plots[[5]],
plots[[6]],
plots[[7]],
nrow = 4
)
# intialize
plots <- list()
# take out seasonality
ts_transDS <- ts_trans %>% diff(lag = 7)
# routine to gather the best number of harmonics
for (i in 1:3){
# fit model
fit <- auto.arima(ts_transDS, xreg = fourier(ts_transDS, K = i), # K = i number of harmonics
seasonal = FALSE, lambda = 1)
# save plots
plots[[i]] <- fit %>%
forecast(xreg = fourier(ts_transDS, K = i, h = 28)) %>%
autoplot() +
xlab(paste('K=',i,'  AICc =', round(fit[['aicc']],2))) +
ylab('')
}
# plot
gridExtra::grid.arrange(
plots[[1]],
plots[[2]],
plots[[3]],
nrow = 3
)
# plot
gridExtra::grid.arrange(
plots[[1]],
plots[[2]],
plots[[3]],
nrow = 3
)
# intialize
plots <- list()
# take out seasonality
ts_transDS <- ts_trans %>% diff(lag = 7)
# routine to gather the best number of harmonics
for (i in 1:3){
# fit model
fit <- auto.arima(ts_transDS, xreg = fourier(ts_transDS, K = i), # K = i number of harmonics
seasonal = FALSE, lambda = 1, stepwise = FALSE, approximation = FALSE)
# save plots
plots[[i]] <- fit %>%
forecast(xreg = fourier(ts_transDS, K = i, h = 28)) %>%
autoplot() +
xlab(paste('K=',i,'  AICc =', round(fit[['aicc']],2))) +
ylab('')
}
# plot
gridExtra::grid.arrange(
plots[[1]],
plots[[2]],
plots[[3]],
nrow = 3
)
# tbats model
fit3 <- ts_trans %>% tbats(use.box.cox = FALSE)
# look model
summary(fit3)
# look model
fit3
# coefs
coef(fit3)
View(fit3)
# predict
fit3 %>% forecast(h = 28) %>% autoplot()
# predict
fit3 %>% forecast(h = 28, level = c(80,95)) %>% autoplot()
library(ggplot2)
library(forecast)
library(dplyr)
library(lubridate)
library(purrr)
# read data
df_trans <- read.csv(file = 'Data/trans_all.csv', header = TRUE, stringsAsFactors = FALSE) %>% map_df(rev)
n <- nrow(df_trans)
trans60 <- df_trans[(n-69):n, 'num_trans'] %>% as.matrix()
# parse data to ts object (forecast)
# create daily times from
inds <- seq(as.Date('2020-03-06'), as.Date('2020-05-24'), by = 'day')
ts_trans <- ts(trans60, start = c(2020, as.numeric(format(inds[1], '%j'))), frequency = 7)
# plot time series
autoplot(ts_trans, color = 'navy') + theme_minimal()
# plot seasonality
# linear
ggseasonplot(ts_trans, season.labels = TRUE) + theme_minimal()
#polar
ggseasonplot(ts_trans, season.labels = TRUE, polar = TRUE) + theme_minimal()
# mean value by day
ggsubseriesplot(ts_trans)
#lag plots
gglagplot(ts_trans) # look all the noise except for lag 7
# data-seasonal-trend-reminder
descomposedTS <- stl(ts_trans[,'num_trans'], s.window = 'periodic')
descomposedTS %>% autoplot()
# lambda
lambda <- df_trans %>%  BoxCox.lambda(method = 'guerrero') # lambda = 1 ==> no more changes
# look trend
ggtsdisplay(ts_trans)
# differentiate
ts_transD <- diff(ts_trans)
# plot new trend
ggtsdisplay(ts_transD)
# function to determine number of appropiate differences
ndif <- ndiffs(ts_trans) #0
# level
mu <- mean(ts_trans)
# new serie
ts_trans <- ts_trans - mu
# fast fourier transform
n <- 70 # total data
df_fft <- data.frame(coef = fft(trans60) / 70, freqindex = 1:70)
# look to the spectrum
df_fft[2:n,] %>%
ggplot(aes(freqindex, Mod(num_trans))) +
geom_line()
# identify peaks
df_fft[ Mod(df_fft$num_trans) > 7.5 & df_fft$freqindex < n/2, 'freqindex' ] - 1
nff <-  function(x = NULL, n = NULL, up = 10L, plot = TRUE, add = FALSE, main = NULL, ...){
#size of the signal
N <- length(x)
#The direct transformation
#The first frequency is DC, the rest are duplicated
dff <-  fft(x)
#The time
t <-  seq(from = 1, to = N)
#Upsampled time
nt <-  seq(from = 1, to = N+1-1/up, by = 1/up)
#New spectrum
ndff <-  array(data = 0, dim = c(length(nt), 1L))
ndff[1] <-  dff[1] #Always, it's the DC component
if(n != 0){
ndff[2:(n+1)] <-  dff[2:(n+1)] #The positive frequencies always come first
#The negative ones are trickier
ndff[length(ndff):(length(ndff) - n + 1)] <-  dff[N:(N - n + 1)]
}
#The inverses
indff <-  fft(ndff/N, inverse = TRUE) ### !
idff <-  fft(dff/N, inverse = TRUE) ### ! N - 73
if(plot){
if(!add){
plot(x = t, y = x, pch = 16L, xlab = "Time", ylab = "Measurement",
main = ifelse(is.null(main), paste(n, "harmonics"), main))
lines(y = Mod(idff), x = t, col = adjustcolor(1L, alpha = 0.5))
}
lines(y = Mod(indff), x = nt, ...)
}
ret <-  data.frame(time = nt, y = Mod(indff))
return(ret)
}
# look different number of armonics
nff(x = trans60, n = 7L, up = 70L, col = 2L)
nff(x = trans60, n = 14L, up = 200L, col = 'navy')
nff(x = trans60, n = 20L, up = 200L, col = 'green')
colors <- viridis::viridis(15)
for(i in 1:15){
ad = ifelse(i == 1, FALSE, TRUE)
nff(x = trans60, n = i, up = 100L, col = colors[i], add = ad, main = "All waves up to 15th harmonic")
}
# recomended model from forecast package
fit1 <- auto.arima(ts_trans, approximation = FALSE,  stepwise = FALSE) # harder search
fit2 <- auto.arima(ts_trans) # simpler search
# look ACF and PACF
ts_trans %>% diff(lag = 7) %>% ggtsdisplay()
# 1. ACF & PACF for residuals
fit2 %>% residuals() %>% ggtsdisplay() #looks good
# 2. Check normality
fit2 %>% checkresiduals() #p-value 0.2, ok
# 3. Look outliers
fit2 %>% residuals() %>% boxplot() # 3 outliers
fit2 %>% residuals() %>% qqnorm() # 3 outliers
fit2 %>% residuals() %>% qqline()
# forecast
fit2 %>% forecast(h = 28, level = c(80,95)) %>% autoplot()
# intialize
plots <- list()
# take out seasonality
ts_transDS <- ts_trans %>% diff(lag = 7)
# routine to gather the best number of harmonics
for (i in 1:3){
# fit model
fit <- auto.arima(ts_transDS, xreg = fourier(ts_transDS, K = i), # K = i number of harmonics
seasonal = FALSE, lambda = 1, stepwise = FALSE, approximation = FALSE)
# save plots
plots[[i]] <- fit %>%
forecast(xreg = fourier(ts_transDS, K = i, h = 28)) %>%
autoplot() +
xlab(paste('K=',i,'  AICc =', round(fit[['aicc']],2))) +
ylab('')
}
# plot
gridExtra::grid.arrange(
plots[[1]],
plots[[2]],
plots[[3]],
nrow = 3
)
# tbats model
fit3 <- ts_trans %>% tbats(use.box.cox = FALSE)
# look model
fit3
# predict
fit3 %>% forecast(h = 28, level = c(80,95)) %>% autoplot()
library(ggplot2)
library(forecast)
library(dplyr)
library(lubridate)
library(purrr)
# read data
df_trans <- read.csv(file = 'Data/trans_all.csv', header = TRUE, stringsAsFactors = FALSE) %>% map_df(rev)
n <- nrow(df_trans)
trans60 <- df_trans[(n-69):n, 'num_trans'] %>% as.matrix()
# parse data to ts object (forecast)
# create daily times from
inds <- seq(as.Date('2020-03-06'), as.Date('2020-05-24'), by = 'day')
ts_trans <- ts(trans60, start = c(2020, as.numeric(format(inds[1], '%j'))), frequency = 7)
# plot time series
autoplot(ts_trans, color = 'navy') + theme_minimal()
# plot seasonality
# linear
ggseasonplot(ts_trans, season.labels = TRUE) + theme_minimal()
#polar
ggseasonplot(ts_trans, season.labels = TRUE, polar = TRUE) + theme_minimal()
# mean value by day
ggsubseriesplot(ts_trans)
#lag plots
gglagplot(ts_trans) # look all the noise except for lag 7
# data-seasonal-trend-reminder
descomposedTS <- stl(ts_trans[,'num_trans'], s.window = 'periodic')
descomposedTS %>% autoplot()
# lambda
lambda <- df_trans %>%  BoxCox.lambda(method = 'guerrero') # lambda = 1 ==> no more changes
# look trend
ggtsdisplay(ts_trans)
# differentiate
ts_transD <- diff(ts_trans)
# plot new trend
ggtsdisplay(ts_transD)
# function to determine number of appropiate differences
ndif <- ndiffs(ts_trans) #0
# level
mu <- mean(ts_trans)
# new serie
ts_trans <- ts_trans - mu
# fast fourier transform
n <- 70 # total data
df_fft <- data.frame(coef = fft(trans60) / 70, freqindex = 1:70)
# look to the spectrum
df_fft[2:n,] %>%
ggplot(aes(freqindex, Mod(num_trans))) +
geom_line()
# identify peaks
df_fft[ Mod(df_fft$num_trans) > 7.5 & df_fft$freqindex < n/2, 'freqindex' ] - 1
nff <-  function(x = NULL, n = NULL, up = 10L, plot = TRUE, add = FALSE, main = NULL, ...){
#size of the signal
N <- length(x)
#The direct transformation
#The first frequency is DC, the rest are duplicated
dff <-  fft(x)
#The time
t <-  seq(from = 1, to = N)
#Upsampled time
nt <-  seq(from = 1, to = N+1-1/up, by = 1/up)
#New spectrum
ndff <-  array(data = 0, dim = c(length(nt), 1L))
ndff[1] <-  dff[1] #Always, it's the DC component
if(n != 0){
ndff[2:(n+1)] <-  dff[2:(n+1)] #The positive frequencies always come first
#The negative ones are trickier
ndff[length(ndff):(length(ndff) - n + 1)] <-  dff[N:(N - n + 1)]
}
#The inverses
indff <-  fft(ndff/N, inverse = TRUE) ### !
idff <-  fft(dff/N, inverse = TRUE) ### ! N - 73
if(plot){
if(!add){
plot(x = t, y = x, pch = 16L, xlab = "Time", ylab = "Measurement",
main = ifelse(is.null(main), paste(n, "harmonics"), main))
lines(y = Mod(idff), x = t, col = adjustcolor(1L, alpha = 0.5))
}
lines(y = Mod(indff), x = nt, ...)
}
ret <-  data.frame(time = nt, y = Mod(indff))
return(ret)
}
# look different number of armonics
nff(x = trans60, n = 7L, up = 70L, col = 2L)
nff(x = trans60, n = 14L, up = 200L, col = 'navy')
nff(x = trans60, n = 20L, up = 200L, col = 'green')
colors <- viridis::viridis(15)
for(i in 1:15){
ad = ifelse(i == 1, FALSE, TRUE)
nff(x = trans60, n = i, up = 100L, col = colors[i], add = ad, main = "All waves up to 15th harmonic")
}
# recomended model from forecast package
fit1 <- auto.arima(ts_trans, approximation = FALSE,  stepwise = FALSE) # harder search
fit2 <- auto.arima(ts_trans) # simpler search
# look ACF and PACF
ts_trans %>% diff(lag = 7) %>% ggtsdisplay()
# 1. ACF & PACF for residuals
fit2 %>% residuals() %>% ggtsdisplay() #looks good
# 2. Check normality
fit2 %>% checkresiduals() #p-value 0.2, ok
# 3. Look outliers
fit2 %>% residuals() %>% boxplot() # 3 outliers
fit2 %>% residuals() %>% qqnorm() # 3 outliers
fit2 %>% residuals() %>% qqline()
# forecast
fit2 %>% forecast(h = 28, level = c(80,95)) %>% autoplot()
# intialize
plots <- list()
# take out seasonality
ts_transDS <- ts_trans %>% diff(lag = 7)
# routine to gather the best number of harmonics
for (i in 1:3){
# fit model
fit <- auto.arima(ts_transDS, xreg = fourier(ts_transDS, K = i), # K = i number of harmonics
seasonal = FALSE, lambda = 1, stepwise = FALSE, approximation = FALSE)
# save plots
plots[[i]] <- fit %>%
forecast(xreg = fourier(ts_transDS, K = i, h = 28)) %>%
autoplot() +
xlab(paste('K=',i,'  AICc =', round(fit[['aicc']],2))) +
ylab('')
}
# plot
gridExtra::grid.arrange(
plots[[1]],
plots[[2]],
plots[[3]],
nrow = 3
)
# tbats model
fit3 <- ts_trans %>% tbats(use.box.cox = FALSE)
# look model
fit3
# predict
fit3 %>% forecast(h = 28, level = c(80,95)) %>% autoplot()
